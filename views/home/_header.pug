
link(rel="icon" href='')
link(rel='stylesheet', href='/js/libraries/bootstrap@5/bootstrap-5.3.2.min.css')

style(type="text/css").
  div, label, input, textarea, select, img, video, iframe { display: flow-root; position: relative; } .-fsb-self-b24879e4, .-fsb-preset-b24879e4 { font-size: 36px; font-weight: 500; line-height: 1.25em; margin-bottom: 25px; text-align: center } .-fsb-self-0ca41025, .-fsb-preset-0ca41025 { font-size: 16px; margin-bottom: 60px; text-align: center } .-fsb-self-2b04715d, .-fsb-preset-2b04715d, .-fsb-preset-09393779 { align-content: flex-start; background: rgba(0, 127, 255, 1); color: rgba(255, 255, 255, 1); display: flex; flex-wrap: wrap; padding-bottom: 100px; padding-top: 100px; position: relative } .-fsb-self-c214b9c7, .-fsb-preset-c214b9c7 { -webkit-border-radius: 100px 100px 100px 100px; border-radius: 100px 100px 100px 100px; font-weight: 500; line-height: 1.75em; padding-left: 15px; padding-right: 15px } .-fsb-self-6699111e, .-fsb-preset-6699111e { margin-right: 15px } .-fsb-self-b8075a73, .-fsb-preset-b8075a73 { font-size: 26px; line-height: 50px } .-fsb-self-954ec4ae, .-fsb-preset-954ec4ae { height: 50px; margin-right: 10px; width: 50px } .-fsb-self-eacc3142, .-fsb-preset-eacc3142 { align-content: flex-start; display: flex; flex-wrap: wrap; margin-bottom: 15px; margin-left: 15px; margin-right: 15px } .-fsb-self-09393779, .-fsb-preset-09393779 { -fsb-inherited-presets: 2b04715d; -fsb-priority: 100; background: rgba(255, 255, 255, 1); color: rgba(77, 77, 77, 1) } 
script(type="text/javascript").
  var __animationHelperDelayedRegisterings = [], __animationHelperDelayedAddings = [];
  var AnimationHelper = {
    extensions: {},
    register: function(animationId, extensionInfo) {
      __animationHelperDelayedRegisterings.push(arguments);
      AnimationHelper.extensions[animationId] = extensionInfo;
    },
    add: function(activeAnimationGroups) {
      __animationHelperDelayedAddings.push(arguments);
      
      for (let animation of activeAnimationGroups) {
        var extensionInfo = AnimationHelper.extensions[animation];
        if (extensionInfo) {
          for (let i=0; i<extensionInfo.tracks.length; i++) {
            AnimationHelper.addPrestartStyles(animation, '0', extensionInfo.tracks[i].selectors || [], extensionInfo.tracks[i].properties || []);
          }
        }
      }
    },
    addPrestartStyles: (animationId, guid, selectors, properties) => {
      var prestartId = `prestart-${animationId}`;
      if (document.getElementById(prestartId)) return;
      
      var combinedStyleHashmap = {};
      
      for (var property of properties) {
        for (var selector of selectors) {
          var style = AnimationHelper.getPrestartStyle(guid, selector, property);
        
          if (style) {
            combinedStyleHashmap[property] = style;
            break;
          }
        }
      }
      
      if (Object.keys(combinedStyleHashmap).length != 0) {
        var element = document.createElement('style');
        element.setAttribute('type', 'text/css');
        element.setAttribute('id', prestartId);
        
        var lines = [];
        for (var selector of selectors) {
          lines.push(`[internal-fsb-animation*="animation-group-${animationId}"]${selector}, [internal-fsb-animation*="animation-group-${animationId}"] ${selector} { ${AnimationHelper.getInlineStyleFromHashMap(combinedStyleHashmap)} }`);
        }
        
        element.innerHTML = lines.join(' ');
        
        var firstStyleElement = document.head.getElementsByTagName('STYLE')[0] || null;
        document.head.insertBefore(element, firstStyleElement);
      }
    },
    getPrestartStyle: (guid, selector, property) => {
      var elements = Array.from(document.querySelectorAll(`[internal-fsb-guid="${guid}"]${selector}, [internal-fsb-guid="${guid}"] ${selector}`));
      
      if (elements.length != 0) {
        var computedStyle = window.getComputedStyle(elements[0], null);
        return computedStyle[property] || null;
      }
      
      return null;
    },
    getInlineStyleFromHashMap: (hash) => {
      var results = [];
      for (var key in hash) {
        if (hash.hasOwnProperty(key) && hash[key] != null) {
          results.push(key + ': ' + hash[key]);
        }
      }
      return results.sort().join('; ');
    }
  };
  window.AnimationHelper !== undefined && (function() { AnimationHelper.add([]); })();
